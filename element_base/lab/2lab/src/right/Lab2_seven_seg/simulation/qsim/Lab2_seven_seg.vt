// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/09/2024 21:32:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    seven_seg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module seven_seg_vlg_sample_tst(
	X,
	sampler_tx
);
input [4:1] X;
output sampler_tx;

reg sample;
time current_time;
always @(X)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module seven_seg_vlg_check_tst (
	D0,
	D1,
	D2,
	D3,
	D4,
	D5,
	D6,
	DP,
	sampler_rx
);
input  D0;
input  D1;
input  D2;
input  D3;
input  D4;
input  D5;
input  D6;
input  DP;
input sampler_rx;

reg  D0_expected;
reg  D1_expected;
reg  D2_expected;
reg  D3_expected;
reg  D4_expected;
reg  D5_expected;
reg  D6_expected;
reg  DP_expected;

reg  D0_prev;
reg  D1_prev;
reg  D2_prev;
reg  D3_prev;
reg  D4_prev;
reg  D5_prev;
reg  D6_prev;
reg  DP_prev;

reg  D0_expected_prev;
reg  D1_expected_prev;
reg  D2_expected_prev;
reg  D3_expected_prev;
reg  D4_expected_prev;
reg  D5_expected_prev;
reg  D6_expected_prev;
reg  DP_expected_prev;

reg  last_D0_exp;
reg  last_D1_exp;
reg  last_D2_exp;
reg  last_D3_exp;
reg  last_D4_exp;
reg  last_D5_exp;
reg  last_D6_exp;
reg  last_DP_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	D0_prev = D0;
	D1_prev = D1;
	D2_prev = D2;
	D3_prev = D3;
	D4_prev = D4;
	D5_prev = D5;
	D6_prev = D6;
	DP_prev = DP;
end

// update expected /o prevs

always @(trigger)
begin
	D0_expected_prev = D0_expected;
	D1_expected_prev = D1_expected;
	D2_expected_prev = D2_expected;
	D3_expected_prev = D3_expected;
	D4_expected_prev = D4_expected;
	D5_expected_prev = D5_expected;
	D6_expected_prev = D6_expected;
	DP_expected_prev = DP_expected;
end



// expected D0
initial
begin
	D0_expected = 1'bX;
end 

// expected D1
initial
begin
	D1_expected = 1'bX;
end 

// expected D2
initial
begin
	D2_expected = 1'bX;
end 

// expected D3
initial
begin
	D3_expected = 1'bX;
end 

// expected D4
initial
begin
	D4_expected = 1'bX;
end 

// expected D5
initial
begin
	D5_expected = 1'bX;
end 

// expected D6
initial
begin
	D6_expected = 1'bX;
end 

// expected DP
initial
begin
	DP_expected = 1'bX;
end 
// generate trigger
always @(D0_expected or D0 or D1_expected or D1 or D2_expected or D2 or D3_expected or D3 or D4_expected or D4 or D5_expected or D5 or D6_expected or D6 or DP_expected or DP)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D0 = %b | expected D1 = %b | expected D2 = %b | expected D3 = %b | expected D4 = %b | expected D5 = %b | expected D6 = %b | expected DP = %b | ",D0_expected_prev,D1_expected_prev,D2_expected_prev,D3_expected_prev,D4_expected_prev,D5_expected_prev,D6_expected_prev,DP_expected_prev);
	$display("| real D0 = %b | real D1 = %b | real D2 = %b | real D3 = %b | real D4 = %b | real D5 = %b | real D6 = %b | real DP = %b | ",D0_prev,D1_prev,D2_prev,D3_prev,D4_prev,D5_prev,D6_prev,DP_prev);
`endif
	if (
		( D0_expected_prev !== 1'bx ) && ( D0_prev !== D0_expected_prev )
		&& ((D0_expected_prev !== last_D0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D0_expected_prev);
		$display ("     Real value = %b", D0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D0_exp = D0_expected_prev;
	end
	if (
		( D1_expected_prev !== 1'bx ) && ( D1_prev !== D1_expected_prev )
		&& ((D1_expected_prev !== last_D1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D1_exp = D1_expected_prev;
	end
	if (
		( D2_expected_prev !== 1'bx ) && ( D2_prev !== D2_expected_prev )
		&& ((D2_expected_prev !== last_D2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D2_exp = D2_expected_prev;
	end
	if (
		( D3_expected_prev !== 1'bx ) && ( D3_prev !== D3_expected_prev )
		&& ((D3_expected_prev !== last_D3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D3_exp = D3_expected_prev;
	end
	if (
		( D4_expected_prev !== 1'bx ) && ( D4_prev !== D4_expected_prev )
		&& ((D4_expected_prev !== last_D4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D4_exp = D4_expected_prev;
	end
	if (
		( D5_expected_prev !== 1'bx ) && ( D5_prev !== D5_expected_prev )
		&& ((D5_expected_prev !== last_D5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D5_expected_prev);
		$display ("     Real value = %b", D5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D5_exp = D5_expected_prev;
	end
	if (
		( D6_expected_prev !== 1'bx ) && ( D6_prev !== D6_expected_prev )
		&& ((D6_expected_prev !== last_D6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D6_expected_prev);
		$display ("     Real value = %b", D6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D6_exp = D6_expected_prev;
	end
	if (
		( DP_expected_prev !== 1'bx ) && ( DP_prev !== DP_expected_prev )
		&& ((DP_expected_prev !== last_DP_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DP_expected_prev);
		$display ("     Real value = %b", DP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_DP_exp = DP_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#165000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module seven_seg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:1] X;
// wires                                               
wire D0;
wire D1;
wire D2;
wire D3;
wire D4;
wire D5;
wire D6;
wire DP;

wire sampler;                             

// assign statements (if any)                          
seven_seg i1 (
// port map - connection between master ports and signals/registers   
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.DP(DP),
	.X(X)
);

// X[4]
initial
begin
	X[4] = 1'b0;
	X[4] = #80000 1'b1;
	X[4] = #80000 1'b0;
end 

// X[3]
initial
begin
	repeat(2)
	begin
		X[3] = 1'b0;
		X[3] = #40000 1'b1;
		# 40000;
	end
	X[3] = 1'b0;
end 

// X[2]
initial
begin
	repeat(4)
	begin
		X[2] = 1'b0;
		X[2] = #20000 1'b1;
		# 20000;
	end
	X[2] = 1'b0;
end 

// X[1]
initial
begin
	repeat(8)
	begin
		X[1] = 1'b0;
		X[1] = #10000 1'b1;
		# 10000;
	end
	X[1] = 1'b0;
end 

seven_seg_vlg_sample_tst tb_sample (
	.X(X),
	.sampler_tx(sampler)
);

seven_seg_vlg_check_tst tb_out(
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.DP(DP),
	.sampler_rx(sampler)
);
endmodule

