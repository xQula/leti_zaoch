// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/09/2024 20:13:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab2_vlg_sample_tst(
	X,
	sampler_tx
);
input [4:1] X;
output sampler_tx;

reg sample;
time current_time;
always @(X)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab2_vlg_check_tst (
	Qut_DC,
	Qut_lr1,
	Qut_MUX,
	sampler_rx
);
input  Qut_DC;
input  Qut_lr1;
input  Qut_MUX;
input sampler_rx;

reg  Qut_DC_expected;
reg  Qut_lr1_expected;
reg  Qut_MUX_expected;

reg  Qut_DC_prev;
reg  Qut_lr1_prev;
reg  Qut_MUX_prev;

reg  Qut_DC_expected_prev;
reg  Qut_lr1_expected_prev;
reg  Qut_MUX_expected_prev;

reg  last_Qut_DC_exp;
reg  last_Qut_lr1_exp;
reg  last_Qut_MUX_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Qut_DC_prev = Qut_DC;
	Qut_lr1_prev = Qut_lr1;
	Qut_MUX_prev = Qut_MUX;
end

// update expected /o prevs

always @(trigger)
begin
	Qut_DC_expected_prev = Qut_DC_expected;
	Qut_lr1_expected_prev = Qut_lr1_expected;
	Qut_MUX_expected_prev = Qut_MUX_expected;
end



// expected Qut_lr1
initial
begin
	Qut_lr1_expected = 1'bX;
end 

// expected Qut_DC
initial
begin
	Qut_DC_expected = 1'bX;
end 

// expected Qut_MUX
initial
begin
	Qut_MUX_expected = 1'bX;
end 
// generate trigger
always @(Qut_DC_expected or Qut_DC or Qut_lr1_expected or Qut_lr1 or Qut_MUX_expected or Qut_MUX)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Qut_DC = %b | expected Qut_lr1 = %b | expected Qut_MUX = %b | ",Qut_DC_expected_prev,Qut_lr1_expected_prev,Qut_MUX_expected_prev);
	$display("| real Qut_DC = %b | real Qut_lr1 = %b | real Qut_MUX = %b | ",Qut_DC_prev,Qut_lr1_prev,Qut_MUX_prev);
`endif
	if (
		( Qut_DC_expected_prev !== 1'bx ) && ( Qut_DC_prev !== Qut_DC_expected_prev )
		&& ((Qut_DC_expected_prev !== last_Qut_DC_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qut_DC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qut_DC_expected_prev);
		$display ("     Real value = %b", Qut_DC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Qut_DC_exp = Qut_DC_expected_prev;
	end
	if (
		( Qut_lr1_expected_prev !== 1'bx ) && ( Qut_lr1_prev !== Qut_lr1_expected_prev )
		&& ((Qut_lr1_expected_prev !== last_Qut_lr1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qut_lr1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qut_lr1_expected_prev);
		$display ("     Real value = %b", Qut_lr1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Qut_lr1_exp = Qut_lr1_expected_prev;
	end
	if (
		( Qut_MUX_expected_prev !== 1'bx ) && ( Qut_MUX_prev !== Qut_MUX_expected_prev )
		&& ((Qut_MUX_expected_prev !== last_Qut_MUX_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Qut_MUX :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Qut_MUX_expected_prev);
		$display ("     Real value = %b", Qut_MUX_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Qut_MUX_exp = Qut_MUX_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#165000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [4:1] X;
// wires                                               
wire Qut_DC;
wire Qut_lr1;
wire Qut_MUX;

wire sampler;                             

// assign statements (if any)                          
lab2 i1 (
// port map - connection between master ports and signals/registers   
	.Qut_DC(Qut_DC),
	.Qut_lr1(Qut_lr1),
	.Qut_MUX(Qut_MUX),
	.X(X)
);

// X[4]
initial
begin
	X[4] = 1'b0;
	X[4] = #80000 1'b1;
	X[4] = #80000 1'b0;
end 

// X[3]
initial
begin
	repeat(2)
	begin
		X[3] = 1'b0;
		X[3] = #40000 1'b1;
		# 40000;
	end
	X[3] = 1'b0;
end 

// X[2]
initial
begin
	repeat(4)
	begin
		X[2] = 1'b0;
		X[2] = #20000 1'b1;
		# 20000;
	end
	X[2] = 1'b0;
end 

// X[1]
initial
begin
	repeat(8)
	begin
		X[1] = 1'b0;
		X[1] = #10000 1'b1;
		# 10000;
	end
	X[1] = 1'b0;
end 

lab2_vlg_sample_tst tb_sample (
	.X(X),
	.sampler_tx(sampler)
);

lab2_vlg_check_tst tb_out(
	.Qut_DC(Qut_DC),
	.Qut_lr1(Qut_lr1),
	.Qut_MUX(Qut_MUX),
	.sampler_rx(sampler)
);
endmodule

