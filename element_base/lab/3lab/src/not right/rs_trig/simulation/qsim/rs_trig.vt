// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/11/2024 22:01:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    rs_trig
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module rs_trig_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module rs_trig_vlg_check_tst (
	C,
	CLRN,
	PRN,
	Q_rs,
	R,
	S,
	X,
	sampler_rx
);
input  C;
input  CLRN;
input  PRN;
input  Q_rs;
input  R;
input  S;
input [3:0] X;
input sampler_rx;

reg  C_expected;
reg  CLRN_expected;
reg  PRN_expected;
reg  Q_rs_expected;
reg  R_expected;
reg  S_expected;
reg [3:0] X_expected;

reg  C_prev;
reg  CLRN_prev;
reg  PRN_prev;
reg  Q_rs_prev;
reg  R_prev;
reg  S_prev;
reg [3:0] X_prev;

reg  C_expected_prev;
reg  CLRN_expected_prev;
reg  PRN_expected_prev;
reg  Q_rs_expected_prev;
reg  R_expected_prev;
reg  S_expected_prev;
reg [3:0] X_expected_prev;

reg  last_C_exp;
reg  last_CLRN_exp;
reg  last_PRN_exp;
reg  last_Q_rs_exp;
reg  last_R_exp;
reg  last_S_exp;
reg [3:0] last_X_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_prev = C;
	CLRN_prev = CLRN;
	PRN_prev = PRN;
	Q_rs_prev = Q_rs;
	R_prev = R;
	S_prev = S;
	X_prev = X;
end

// update expected /o prevs

always @(trigger)
begin
	C_expected_prev = C_expected;
	CLRN_expected_prev = CLRN_expected;
	PRN_expected_prev = PRN_expected;
	Q_rs_expected_prev = Q_rs_expected;
	R_expected_prev = R_expected;
	S_expected_prev = S_expected;
	X_expected_prev = X_expected;
end


// expected X[ 3 ]
initial
begin
	X_expected[3] = 1'b0;
	X_expected[3] = #80000 1'b1;
	X_expected[3] = #80000 1'b0;
end 
// expected X[ 2 ]
initial
begin
	repeat(2)
	begin
		X_expected[2] = 1'b0;
		X_expected[2] = #40000 1'b1;
		# 40000;
	end
	X_expected[2] = 1'b0;
end 
// expected X[ 1 ]
initial
begin
	repeat(4)
	begin
		X_expected[1] = 1'b0;
		X_expected[1] = #20000 1'b1;
		# 20000;
	end
	X_expected[1] = 1'b0;
end 
// expected X[ 0 ]
initial
begin
	repeat(8)
	begin
		X_expected[0] = 1'b0;
		X_expected[0] = #10000 1'b1;
		# 10000;
	end
	X_expected[0] = 1'b0;
end 

// expected C
initial
begin
	repeat(4)
	begin
		C_expected = 1'b0;
		C_expected = #20000 1'b1;
		# 20000;
	end
	C_expected = 1'b0;
end 

// expected PRN
initial
begin
	PRN_expected = 1'b0;
	PRN_expected = #30000 1'b1;
end 

// expected CLRN
initial
begin
	CLRN_expected = 1'b1;
	CLRN_expected = #110000 1'b0;
	CLRN_expected = #10000 1'b1;
end 

// expected S
initial
begin
	S_expected = 1'b0;
	S_expected = #90000 1'b1;
	S_expected = #40000 1'b0;
end 

// expected R
initial
begin
	R_expected = 1'b0;
	R_expected = #10000 1'b1;
	R_expected = #60000 1'b0;
end 

// expected Q_rs
initial
begin
	Q_rs_expected = 1'bX;
end 
// generate trigger
always @(C_expected or C or CLRN_expected or CLRN or PRN_expected or PRN or Q_rs_expected or Q_rs or R_expected or R or S_expected or S or X_expected or X)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C = %b | expected CLRN = %b | expected PRN = %b | expected Q_rs = %b | expected R = %b | expected S = %b | expected X = %b | ",C_expected_prev,CLRN_expected_prev,PRN_expected_prev,Q_rs_expected_prev,R_expected_prev,S_expected_prev,X_expected_prev);
	$display("| real C = %b | real CLRN = %b | real PRN = %b | real Q_rs = %b | real R = %b | real S = %b | real X = %b | ",C_prev,CLRN_prev,PRN_prev,Q_rs_prev,R_prev,S_prev,X_prev);
`endif
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( CLRN_expected_prev !== 1'bx ) && ( CLRN_prev !== CLRN_expected_prev )
		&& ((CLRN_expected_prev !== last_CLRN_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLRN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLRN_expected_prev);
		$display ("     Real value = %b", CLRN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_CLRN_exp = CLRN_expected_prev;
	end
	if (
		( PRN_expected_prev !== 1'bx ) && ( PRN_prev !== PRN_expected_prev )
		&& ((PRN_expected_prev !== last_PRN_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRN_expected_prev);
		$display ("     Real value = %b", PRN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PRN_exp = PRN_expected_prev;
	end
	if (
		( Q_rs_expected_prev !== 1'bx ) && ( Q_rs_prev !== Q_rs_expected_prev )
		&& ((Q_rs_expected_prev !== last_Q_rs_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q_rs :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_rs_expected_prev);
		$display ("     Real value = %b", Q_rs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_rs_exp = Q_rs_expected_prev;
	end
	if (
		( R_expected_prev !== 1'bx ) && ( R_prev !== R_expected_prev )
		&& ((R_expected_prev !== last_R_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_R_exp = R_expected_prev;
	end
	if (
		( S_expected_prev !== 1'bx ) && ( S_prev !== S_expected_prev )
		&& ((S_expected_prev !== last_S_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S_expected_prev);
		$display ("     Real value = %b", S_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_S_exp = S_expected_prev;
	end
	if (
		( X_expected_prev[0] !== 1'bx ) && ( X_prev[0] !== X_expected_prev[0] )
		&& ((X_expected_prev[0] !== last_X_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_X_exp[0] = X_expected_prev[0];
	end
	if (
		( X_expected_prev[1] !== 1'bx ) && ( X_prev[1] !== X_expected_prev[1] )
		&& ((X_expected_prev[1] !== last_X_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_X_exp[1] = X_expected_prev[1];
	end
	if (
		( X_expected_prev[2] !== 1'bx ) && ( X_prev[2] !== X_expected_prev[2] )
		&& ((X_expected_prev[2] !== last_X_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_X_exp[2] = X_expected_prev[2];
	end
	if (
		( X_expected_prev[3] !== 1'bx ) && ( X_prev[3] !== X_expected_prev[3] )
		&& ((X_expected_prev[3] !== last_X_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_X_exp[3] = X_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#165000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module rs_trig_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire C;
wire CLRN;
wire PRN;
wire Q_rs;
wire R;
wire S;
wire [3:0] X;

wire sampler;                             

// assign statements (if any)                          
rs_trig i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.clk(clk),
	.CLRN(CLRN),
	.PRN(PRN),
	.Q_rs(Q_rs),
	.R(R),
	.S(S),
	.X(X)
);

// clk
initial
begin
	clk = 1'b1;
	# 5000;
	repeat(16)
	begin
		clk = 1'b0;
		clk = #5000 1'b1;
		# 5000;
	end
end 

rs_trig_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

rs_trig_vlg_check_tst tb_out(
	.C(C),
	.CLRN(CLRN),
	.PRN(PRN),
	.Q_rs(Q_rs),
	.R(R),
	.S(S),
	.X(X),
	.sampler_rx(sampler)
);
endmodule

