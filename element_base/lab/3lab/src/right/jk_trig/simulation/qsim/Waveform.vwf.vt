// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/16/2025 13:56:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    jk_trig
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module jk_trig_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module jk_trig_vlg_check_tst (
	C,
	J,
	K,
	Q,
	QQ,
	X,
	sampler_rx
);
input  C;
input  J;
input  K;
input  Q;
input  QQ;
input [3:0] X;
input sampler_rx;

reg  C_expected;
reg  J_expected;
reg  K_expected;
reg  Q_expected;
reg  QQ_expected;
reg [3:0] X_expected;

reg  C_prev;
reg  J_prev;
reg  K_prev;
reg  Q_prev;
reg  QQ_prev;
reg [3:0] X_prev;

reg  C_expected_prev;
reg  J_expected_prev;
reg  K_expected_prev;
reg  Q_expected_prev;
reg  QQ_expected_prev;
reg [3:0] X_expected_prev;

reg  last_C_exp;
reg  last_J_exp;
reg  last_K_exp;
reg  last_Q_exp;
reg  last_QQ_exp;
reg [3:0] last_X_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	C_prev = C;
	J_prev = J;
	K_prev = K;
	Q_prev = Q;
	QQ_prev = QQ;
	X_prev = X;
end

// update expected /o prevs

always @(trigger)
begin
	C_expected_prev = C_expected;
	J_expected_prev = J_expected;
	K_expected_prev = K_expected;
	Q_expected_prev = Q_expected;
	QQ_expected_prev = QQ_expected;
	X_expected_prev = X_expected;
end



// expected X[0]
initial
begin
	X_expected[0] = 1'bX;
end 

// expected C
initial
begin
	C_expected = 1'bX;
end 

// expected J
initial
begin
	J_expected = 1'bX;
end 

// expected K
initial
begin
	K_expected = 1'bX;
end 

// expected Q
initial
begin
	Q_expected = 1'bX;
end 

// expected QQ
initial
begin
	QQ_expected = 1'bX;
end 
// generate trigger
always @(C_expected or C or J_expected or J or K_expected or K or Q_expected or Q or QQ_expected or QQ or X_expected or X)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C = %b | expected J = %b | expected K = %b | expected Q = %b | expected QQ = %b | expected X = %b | ",C_expected_prev,J_expected_prev,K_expected_prev,Q_expected_prev,QQ_expected_prev,X_expected_prev);
	$display("| real C = %b | real J = %b | real K = %b | real Q = %b | real QQ = %b | real X = %b | ",C_prev,J_prev,K_prev,Q_prev,QQ_prev,X_prev);
`endif
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( J_expected_prev !== 1'bx ) && ( J_prev !== J_expected_prev )
		&& ((J_expected_prev !== last_J_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port J :: @time = %t",  $realtime);
		$display ("     Expected value = %b", J_expected_prev);
		$display ("     Real value = %b", J_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_J_exp = J_expected_prev;
	end
	if (
		( K_expected_prev !== 1'bx ) && ( K_prev !== K_expected_prev )
		&& ((K_expected_prev !== last_K_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port K :: @time = %t",  $realtime);
		$display ("     Expected value = %b", K_expected_prev);
		$display ("     Real value = %b", K_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_K_exp = K_expected_prev;
	end
	if (
		( Q_expected_prev !== 1'bx ) && ( Q_prev !== Q_expected_prev )
		&& ((Q_expected_prev !== last_Q_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q_exp = Q_expected_prev;
	end
	if (
		( QQ_expected_prev !== 1'bx ) && ( QQ_prev !== QQ_expected_prev )
		&& ((QQ_expected_prev !== last_QQ_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port QQ :: @time = %t",  $realtime);
		$display ("     Expected value = %b", QQ_expected_prev);
		$display ("     Real value = %b", QQ_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_QQ_exp = QQ_expected_prev;
	end
	if (
		( X_expected_prev[0] !== 1'bx ) && ( X_prev[0] !== X_expected_prev[0] )
		&& ((X_expected_prev[0] !== last_X_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_X_exp[0] = X_expected_prev[0];
	end
	if (
		( X_expected_prev[1] !== 1'bx ) && ( X_prev[1] !== X_expected_prev[1] )
		&& ((X_expected_prev[1] !== last_X_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_X_exp[1] = X_expected_prev[1];
	end
	if (
		( X_expected_prev[2] !== 1'bx ) && ( X_prev[2] !== X_expected_prev[2] )
		&& ((X_expected_prev[2] !== last_X_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_X_exp[2] = X_expected_prev[2];
	end
	if (
		( X_expected_prev[3] !== 1'bx ) && ( X_prev[3] !== X_expected_prev[3] )
		&& ((X_expected_prev[3] !== last_X_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_X_exp[3] = X_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#165000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module jk_trig_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire C;
wire J;
wire K;
wire Q;
wire QQ;
wire [3:0] X;

wire sampler;                             

// assign statements (if any)                          
jk_trig i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.clk(clk),
	.J(J),
	.K(K),
	.Q(Q),
	.QQ(QQ),
	.X(X)
);
// X[ 3 ]
initial
begin
	repeat(2)
	begin
		X[3] = 1'b0;
		X[3] = #40000 1'b1;
		# 40000;
	end
	X[3] = 1'b0;
end 
// X[ 2 ]
initial
begin
	repeat(4)
	begin
		X[2] = 1'b0;
		X[2] = #20000 1'b1;
		# 20000;
	end
	X[2] = 1'b0;
end 
// X[ 1 ]
initial
begin
	repeat(8)
	begin
		X[1] = 1'b0;
		X[1] = #10000 1'b1;
		# 10000;
	end
	X[1] = 1'b0;
end 
// X[ 0 ]
initial
begin
	X[0] = 1'bX;
end 

// clk
initial
begin
	clk = 1'b1;
	# 5000;
	repeat(16)
	begin
		clk = 1'b0;
		clk = #5000 1'b1;
		# 5000;
	end
end 

jk_trig_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

jk_trig_vlg_check_tst tb_out(
	.C(C),
	.J(J),
	.K(K),
	.Q(Q),
	.QQ(QQ),
	.X(X),
	.sampler_rx(sampler)
);
endmodule

