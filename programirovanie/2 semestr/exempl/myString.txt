#include <iostream>

class MyString {
public:

    MyString() {
        str = nullptr;
        length = 0;
    }

    MyString(const char* str) {

        length = strlen(str);
        this->str = new char[length + 1];
        for (int i = 0; i < length; i++)
        {
            this->str[i] = str[i];
        }
        this->str[length] = '\0';

    }

    ~MyString() {
        delete[] this->str;
    }

    MyString(const MyString& other) {
        length = strlen(other.str);
        this->str = new char[length + 1];

        for (int i = 0; i < length; i++)
        {
            this->str[i] = other.str[i];
        }

        this->str[length] = '\0';
    }

    MyString& operator =(const MyString& other) {
        if (this->str != nullptr)
        {
            delete[] str;
        }

        length = strlen(other.str);
        this->str = new char[length + 1];

        for (int i = 0; i < length; i++)
        {
            this->str[i] = other.str[i];
        }

        this->str[length] = '\0';

        return *this;

    }

    MyString operator+(const MyString& other) {

        MyString newStr;
        int thisLength = strlen(this->str);
        int otherLength = strlen(other.str);
        newStr.length = thisLength + otherLength;
        newStr.str = new char[thisLength + otherLength + 1];
        int i = 0;
        for (; i < thisLength; i++)
        {
            newStr.str[i] = this->str[i];
        }
        for (int j = 0; j < otherLength; j++, i++)
        {
            newStr.str[i] = other.str[j];
        }
        newStr.str[thisLength + otherLength] = '\0';
        return newStr;
    }

    int Length() {
        return length;
    }

    bool operator ==(const MyString& other) {
        if (this->length != other.length)
        {
            return false;
        }

        for (int i = 0; i < this->length; i++)
        {
            if (this->str[i] != other.str[i])
            {
                return false;
            }
        }
        return true;
    }

    bool operator !=(const MyString& other) {
        return !(this->operator==(other));
    }

    char& operator [](int index) {
        return this->str[index];
    }
    MyString(MyString&& other) noexcept {
        this->length = other.length;
        this->str = other.str;
        other.str = nullptr;
    }

    friend MyString erase(int elem, MyString& other) {
        for (; elem < other.length; elem++) {
            other.str[elem + 1] = other.str[elem + 2];
        }
        other.length--;
        MyString newOther;
        newOther.length = other.length;
        newOther.str = new char[other.length];
        for (int a = 0; a < other.length; a++) {
            newOther[a] = other[a];
        }
        return newOther;
    }

    friend std::ostream& operator<< (std::ostream& out, const MyString& other) {
        for (int a = 0; a < other.length; a++) {
            out << other.str[a];
        }
        return out;
    }

    friend void Print(const MyString& other) {
        for (int a = 0; a < other.length; a++)
            std::cout << other.str[a];
    }

private:
    char* str;
    int length;
};