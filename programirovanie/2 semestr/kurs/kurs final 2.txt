#include <iostream>
#include <string>
#include <fstream>
using namespace std;

class MyString {
public:

    MyString() {
        str = nullptr;
        length = 0;
    }

    MyString(const char* str) {

        length = strlen(str);
        this->str = new char[length + 1];
        for (int i = 0; i < length; i++)
        {
            this->str[i] = str[i];
        }
        this->str[length] = '\0';

    }

    MyString(string& str) {

        length = str.length();
        this->str = new char[length + 1];
        for (int i = 0; i < length; i++)
        {
            this->str[i] = str[i];
        }
        this->str[length] = '\0';

    }

    ~MyString() {
        delete[] this->str;
    }

    MyString(const MyString& other) {
        length = strlen(other.str);
        this->str = new char[length + 1];

        for (int i = 0; i < length; i++)
        {
            this->str[i] = other.str[i];
        }

        this->str[length] = '\0';
    }

    MyString& operator =(const MyString& other) {
        if (this->str != nullptr)
        {
            delete[] str;
        }

        length = strlen(other.str);
        this->str = new char[length + 1];

        for (int i = 0; i < length; i++)
        {
            this->str[i] = other.str[i];
        }

        this->str[length] = '\0';

        return *this;

    }

    MyString operator+(const MyString& other) {

        MyString newStr;
        int thisLength = strlen(this->str);
        int otherLength = strlen(other.str);
        newStr.length = thisLength + otherLength;
        newStr.str = new char[thisLength + otherLength + 1];
        int i = 0;
        for (; i < thisLength; i++)
        {
            newStr.str[i] = this->str[i];
        }
        for (int j = 0; j < otherLength; j++, i++)
        {
            newStr.str[i] = other.str[j];
        }
        newStr.str[thisLength + otherLength] = '\0';
        return newStr;
    }

    int Length() {
        return length;
    }

    bool operator ==(const MyString& other) {
        if (this->length != other.length)
        {
            return false;
        }

        for (int i = 0; i < this->length; i++)
        {
            if (this->str[i] != other.str[i])
            {
                return false;
            }
        }
        return true;
    }

    bool operator !=(const MyString& other) {
        return !(this->operator==(other));
    }

    char& operator [](int index) {
        return this->str[index];
    }
    MyString(MyString&& other) noexcept {
        this->length = other.length;
        this->str = other.str;
        other.str = nullptr;
    }

    friend std::ostream& operator<< (std::ostream& out, const MyString& other) {
        for (int a = 0; a < other.length; a++) {
            out << other.str[a];
        }
        return out;
    }

private:
    char* str;
    int length;
};

class List
{
public:
    List();
    ~List();
    void pop_front();
    void push_back(MyString data);
    void clear();
    int getSize() { return Size; }
    MyString& operator[](const int index);;

private:



    class Node {
    public:
        Node* pNext;
        MyString data;
        Node(MyString data = MyString(), Node* pNext = nullptr) {
            this->data = data;
            this->pNext = pNext;
        }
    };
    int Size;
    Node* head;
};


List::List() {
    Size = 0;
    head = nullptr;
}

List::~List() {
    clear();
}


void List::pop_front() {
    Node* temp = head;
    head = head->pNext;
    delete temp;
    Size--;
}

void List::push_back(MyString data) {
    if (head == nullptr) {
        head = new Node(data);
    }
    else {
        Node* current = this->head;
        while (current->pNext != nullptr) {
            current = current->pNext;
        }
        current->pNext = new Node(data);
    }
    Size++;
}

void List::clear() {
    while (Size) {
        pop_front();
    }
}


MyString& List::operator[](const int index) {
    int counter = 0;
    Node* current = this->head;
    while (current != nullptr) {
        if (counter == index) {
            return current->data;
        }
        current = current->pNext;
        counter++;
    }
}


void readTxt(const char* nameTxt, fstream& fs, List& other) {

    fs.open(nameTxt, fstream::out | fstream::in | fstream::app);
    if (!fs.is_open()) {
        cout << "File " << nameTxt << " opening error!" << endl;
    }
    else {
        cout << "File " << nameTxt << " open" << endl;
        string z;
        while (!fs.eof()) {
            z = "";
            getline(fs, z);
            other.push_back(z);
        }
    }
    fs.close();
}

void writeTxtSeparator(const char* nameTxt, fstream& fs) {
    fs.open(nameTxt, fstream::out | fstream::in | fstream::app);
    if (!fs.is_open()) {
        cout << "Error open File!";
    }
    else {
        cout << "Open " << nameTxt << " File!" << endl;
        fs << "--------------------------------------------------------" << '\n';
    }
    fs.close();
}

void writeTxt(const char* nameTxt, fstream& fs, List& other, int size = 0) {
    fs.open(nameTxt, fstream::out | fstream::in | fstream::app);
    if (!fs.is_open()) {
        cout << "Error open File!";
    }
    else {
        cout << "Open " << nameTxt << " File!" << endl;
        fs << nameTxt << '\n';
        for (int i = 0; i <= size; i++) {
            fs << other[i] << '\n';
        }
    }
    fs.close();
}

void writeBusPassengers(const char* nameTxt, fstream& fs, List& other, int&& size) {
    writeTxt(nameTxt, fs, other, size);
    writeTxtSeparator(nameTxt, fs);
}

void busLoading(List& otherOne, List& otherTwo, int size) {
    for (int i = 0; i < size; i++) {
        otherOne.push_back(otherTwo[0]);
        otherTwo.pop_front();
    }
}

void  busUnloading(List& other, int size, const char* nameTxt, fstream& fs) {
    while (size) {
        writeTxt(nameTxt, fs, other);
        other.pop_front();
        size--;
    }
    writeTxtSeparator(nameTxt, fs);
}

int getRandomNumber(int min, int max) {
    static const double fraction = 1.0 / (static_cast<double>(RAND_MAX) + 1.0);
    return static_cast<int>(rand() * fraction * (max - min + 1) + min);
}

void addPassengers(int& max, List& bus, List& busStop) {
    for (int i = 0; i < max; i++)
    {
        if (bus.getSize() != 6) {
            if (busStop.getSize() != 0) {
                busLoading(bus, busStop, 1);
                if (bus.getSize() == 6 || busStop.getSize() == 0) {
                    break;
                }
            }
            else { break; }
        }
        else { break; }
    }
}

int checkingUpload(int& max, List& bus, int& var) {
    for (int i = 0; i < max; i++) {
        if (bus.getSize() < var) {
            var--;
        }
        else { break; }
    }
    return var;
}

int checkingDownload(int& max, List& busStop, int& varOne, List& bus, int varTwo) {
    for (int i = 0; i < max; i++) {
        if (busStop.getSize() < varOne) {
            varOne--;
        }
        else { break; }
    }
    for (int i = 0; i < max; i++) {
        varTwo = 6 - bus.getSize();
        if (varTwo < varOne) {
            varOne = varTwo;
        }
        else { break; }
    }
    return varOne;
}

int main() {
    srand(static_cast<unsigned int>(time(0)));
    rand();
    List busStopA;
    List busStopC;
    List busStopB;
    List busStopD;
    List busStopG;
    List bus;
    fstream fs;
    const char* nameTxtA = "A.txt";
    const char* nameTxtB = "B.txt";
    const char* nameTxtC = "C.txt";
    const char* nameTxtD = "D.txt";
    const char* nameTxtG = "G.txt";
    const char* nameReleased = "nameReleased.txt";
    const char* namePassengers = "namePassengers.txt";
    const char* nameAllPassengersBusStop = "nameAllPassengersBusStop.txt";
    readTxt(nameTxtA, fs, busStopA);
    readTxt(nameTxtB, fs, busStopB);
    readTxt(nameTxtC, fs, busStopC);
    readTxt(nameTxtD, fs, busStopD);
    readTxt(nameTxtG, fs, busStopG);
    int sizeBusMax = 6;
    int sizeBusMin = 1;
    int sizeBusMidlle = 3;
    int sizeBusOther = 0;
    int variableOne;
    int variableTwo;
    int max = 10;
    int on = 0;
    busLoading(bus, busStopA, sizeBusMax); // passengers get on the bus
    while (true) {

        // bus point A
        if (busStopA.getSize() != 0) {
            sizeBusMax = 6;
            checkingUpload(max, bus, sizeBusMax);
            if (on == true) {
                busUnloading(bus, sizeBusMax, nameReleased, fs);
                sizeBusMax = 6;
                checkingDownload(max, busStopA, sizeBusMax, bus, sizeBusOther);
                busLoading(bus, busStopA, sizeBusMax); // passengers get on the bus
                addPassengers(max, bus, busStopA);
            }
            writeBusPassengers(namePassengers, fs, bus, bus.getSize() - 1); // bus passengers
            writeTxt(nameAllPassengersBusStop, fs, busStopA, busStopA.getSize() - 1); // passengers point A
            on = 1;
        }

        //bus point C
        if (busStopC.getSize() != 0) {
            variableOne = getRandomNumber(sizeBusMin, sizeBusMidlle);
            variableTwo = variableOne;
            checkingUpload(max, bus, variableOne);
            busUnloading(bus, variableOne, nameReleased, fs);  //  passengers get off the bus, write neamRealeased
            checkingDownload(max, busStopC, variableOne, bus, variableTwo);
            busLoading(bus, busStopC, variableOne);// passengers get on the bus
            addPassengers(max, bus, busStopC);
            writeBusPassengers(namePassengers, fs, bus, bus.getSize() - 1); // bus passengers
            writeTxt(nameAllPassengersBusStop, fs, busStopC, busStopC.getSize() - 1); // passengers point C
        }

        //bus point D
        if (busStopD.getSize() != 0) {
            variableOne = getRandomNumber(sizeBusMin, sizeBusMidlle);
            variableTwo = variableOne;
            checkingUpload(max, bus, variableOne);
            busUnloading(bus, variableOne, nameReleased, fs);  //  passengers get off the bus, write neamRealeased
            checkingDownload(max, busStopD, variableOne, bus, variableTwo);
            busLoading(bus, busStopD, variableOne); // passengers get on the bus
            addPassengers(max, bus, busStopD);
            writeBusPassengers(namePassengers, fs, bus, bus.getSize() - 1); // bus passengers
            writeTxt(nameAllPassengersBusStop, fs, busStopD, busStopD.getSize() - 1); // passengers point C 
        }

        //bus point B
        if (busStopB.getSize() != 0) {
            sizeBusMax = 6;
            checkingUpload(max, bus, sizeBusMax);
            busUnloading(bus, sizeBusMax, nameReleased, fs);  // bus point B, write neamRealeased
            sizeBusMax = 6;
            checkingDownload(max, busStopB, sizeBusMax, bus, sizeBusOther);
            busLoading(bus, busStopB, sizeBusMax); // passengers get on the bus
            addPassengers(max, bus, busStopB);
            writeBusPassengers(namePassengers, fs, bus, bus.getSize() - 1); // bus passengers
            writeTxt(nameAllPassengersBusStop, fs, busStopB, busStopB.getSize() - 1); // passengers point B
        }

        //bus point D
        if (busStopD.getSize() != 0) {
            variableOne = getRandomNumber(sizeBusMin, sizeBusMidlle);
            variableTwo = variableOne;
            checkingUpload(max, bus, variableOne);
            busUnloading(bus, variableOne, nameReleased, fs);  //  passengers get off the bus, write neamRealeased
            checkingDownload(max, busStopD, variableOne, bus, variableTwo);
            busLoading(bus, busStopD, variableOne); // passengers get on the bus
            addPassengers(max, bus, busStopD);
            writeBusPassengers(namePassengers, fs, bus, bus.getSize() - 1); // bus passengers
            writeTxt(nameAllPassengersBusStop, fs, busStopD, busStopD.getSize() - 1); // passengers point C 
        }

        //bus point C
        if (busStopC.getSize() != 0) {
            variableOne = getRandomNumber(sizeBusMin, sizeBusMidlle);
            variableTwo = variableOne;
            checkingUpload(max, bus, variableOne);
            busUnloading(bus, variableOne, nameReleased, fs);  //  passengers get off the bus, write neamRealeased
            checkingDownload(max, busStopC, variableOne, bus, variableTwo);
            busLoading(bus, busStopC, variableOne);// passengers get on the bus
            addPassengers(max, bus, busStopC);
            writeBusPassengers(namePassengers, fs, bus, bus.getSize() - 1); // bus passengers
            writeTxt(nameAllPassengersBusStop, fs, busStopC, busStopC.getSize() - 1); // passengers point C
        }

        //bus not point G
        writeTxt(nameAllPassengersBusStop, fs, busStopG, busStopG.getSize() - 1); // passengers point A

        if (busStopA.getSize() == 0 && busStopB.getSize() == 0 && busStopC.getSize() == 0 && busStopD.getSize() == 0) {
            busUnloading(bus, bus.getSize(), nameReleased, fs);
            break;
        }
    }
    return 0;
}